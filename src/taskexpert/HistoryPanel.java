/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package taskexpert;


import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
/**
 *
 * @author TVY
 */
public class HistoryPanel extends javax.swing.JPanel{

    /**
     * Creates new form CreateTasksPanel
     */
    Statement st;
    ResultSet rs;
    int i=0;
    ArrayList<TTask> list = new ArrayList<>();
    ArrayList<TTask> list1 = new ArrayList<>();
    
    public HistoryPanel() {

        initComponents();
        showLabel.setToolTipText("<html><font face=\"Khmer OS Content\" Size=3>បង្ហាញទិន្នន័យ</font></html>");
        clearList.setToolTipText("<html><font face=\"Khmer OS Content\" Size=3>លុបទិន្នន័យចេញពីតារាង</font></html>");
        //startDate.setToolTipText("<html><font face=\"Khmer OS Content\" Size=3>ថ្ងៃចាប់ផ្តើម ត្រូវតូចជាង</font></html>");
        
        setSize(930, 480);   
        
        startDate.setFormats("dd/MM/yy");
        startDate.getEditor().setEditable(false);
        untilDate.setFormats("dd/MM/yy");
        untilDate.getEditor().setEditable(false);
        
        //Justify Column Header
        TableCellRenderer rendererFromHeader = historyTable.getTableHeader().getDefaultRenderer();
        JLabel headerLabel = (JLabel)rendererFromHeader;
        headerLabel.setHorizontalAlignment(JLabel.CENTER);  
        
        historyTable.setFont(new Font("Khmer OS Content",0, 13));
        historyTable.getTableHeader().setResizingAllowed(false);
        historyTable.getTableHeader().setFont(new Font("Khmer OS Content",0, 15));       
        
        historyTable.getTableHeader().setReorderingAllowed(false);        
        historyTable.setRowSelectionAllowed(false);
        historyTable.setShowVerticalLines(false);
        historyTable.setShowHorizontalLines(false);
        historyTable.setGridColor(Color.GRAY);
        historyTable.setBackground(MainForm.selectedColor);
                  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        historyTable = new javax.swing.JTable();
        showLabel = new javax.swing.JLabel();
        startDate = new org.jdesktop.swingx.JXDatePicker();
        jLabel2 = new javax.swing.JLabel();
        untilDate = new org.jdesktop.swingx.JXDatePicker();
        jCheckBox1 = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        clearList = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(230, 255, 255));
        setLayout(null);

        historyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ថ្ងៃបង្កើត", "ចំណងជើង", "ប្រភេទការងារ", "សម្លេងរោទិ៍", "ថ្ងៃរោទិ៍", "ម៉ោងរោទិ៍", "រួចរាល់"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        historyTable.setEnabled(false);
        historyTable.setOpaque(false);
        historyTable.setRowHeight(29);
        jScrollPane1.setViewportView(historyTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(0, 100, 930, 350);

        showLabel.setBackground(new java.awt.Color(204, 204, 255));
        showLabel.setFont(new java.awt.Font("Khmer OS Content", 0, 14)); // NOI18N
        showLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        showLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/taskexpert/images/Show.png"))); // NOI18N
        showLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                showLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                showLabelMouseExited(evt);
            }
        });
        add(showLabel);
        showLabel.setBounds(470, 40, 60, 50);
        add(startDate);
        startDate.setBounds(150, 50, 130, 30);

        jLabel2.setFont(new java.awt.Font("Khmer OS Content", 0, 14)); // NOI18N
        jLabel2.setText("ដល់ៈ");
        add(jLabel2);
        jLabel2.setBounds(290, 50, 40, 30);
        add(untilDate);
        untilDate.setBounds(330, 50, 130, 30);

        jCheckBox1.setFont(new java.awt.Font("Khmer OS Content", 0, 14)); // NOI18N
        jCheckBox1.setText("បង្ហាញព័ត៌មានទាំងអស់");
        jCheckBox1.setOpaque(false);
        jCheckBox1.setRequestFocusEnabled(false);
        jCheckBox1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckBox1StateChanged(evt);
            }
        });
        add(jCheckBox1);
        jCheckBox1.setBounds(20, 10, 160, 30);
        add(jSeparator1);
        jSeparator1.setBounds(20, 40, 560, 2);

        clearList.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        clearList.setIcon(new javax.swing.ImageIcon(getClass().getResource("/taskexpert/images/clear list.png"))); // NOI18N
        clearList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearListMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                clearListMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                clearListMouseExited(evt);
            }
        });
        add(clearList);
        clearList.setBounds(530, 40, 60, 50);

        jLabel4.setFont(new java.awt.Font("Khmer OS Content", 0, 14)); // NOI18N
        jLabel4.setText("ព័ត៌មានចាប់ពីថ្ងៃខែឆ្នាំៈ");
        add(jLabel4);
        jLabel4.setBounds(20, 50, 130, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckBox1StateChanged
        // TODO add your handling code here:
        if(!jCheckBox1.isSelected()){
            startDate.setEnabled(true);
            untilDate.setEnabled(true);            
        }
        else{
        startDate.setDate(null);
        untilDate.setDate(null);
        startDate.setEnabled(false);
        untilDate.setEnabled(false);
        }
    }//GEN-LAST:event_jCheckBox1StateChanged

    private void showLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showLabelMouseExited
        // TODO add your handling code here:
//        showLabel.setFont(new Font("Khmer OS Content", Font.PLAIN, 14));
        showLabel.setBorder(BorderFactory.createEmptyBorder());
    }//GEN-LAST:event_showLabelMouseExited

    private void showLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showLabelMouseEntered
        // TODO add your handling code here:
//        showLabel.setFont(new Font("Khmer OS Content", Font.BOLD, 14));
        showLabel.setBorder(BorderFactory.createLineBorder(Color.BLACK,2));
    }//GEN-LAST:event_showLabelMouseEntered

    private void showLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showLabelMouseClicked
        // TODO add your handling code here:        
        DefaultTableModel dm = (DefaultTableModel)historyTable.getModel();
        list.clear();
        list1.clear();
        
        if(jCheckBox1.isSelected()){
            historyTable.setShowHorizontalLines(true);
            historyTable.setShowVerticalLines(true);
            try {
            st = MainForm.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            rs = st.executeQuery("Select * from tbTasks");            
            while(rs.next()){
                int tid = Integer.parseInt(rs.getString("taskID"));
                String tcreatedate = rs.getString("createDate");
                String ttitle = rs.getString("title");
                String tnote = rs.getString("notes");
                String tcategory = rs.getString("category");
                String tsound = rs.getString("sounds");
                String ttaskdate = rs.getString("taskDate");                
                String ttime = rs.getString("times");
                
                DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
                Date d = (Date)formatter.parse(tcreatedate);
                SimpleDateFormat newFormat = new SimpleDateFormat("dd/MM/yy");
                String cd = newFormat.format(d);
                
                String tapptoopen = rs.getString("appToOpen");
                String tapptoblock = rs.getString("appToBlock");
                int ttimeforblock = Integer.parseInt(rs.getString("timeForBlock"));
                boolean tdonestatus = rs.getBoolean("doneStatus");
                TTask t = new TTask(tid, cd, ttitle, tnote, tcategory, tsound, ttaskdate, ttime,tapptoopen,tapptoblock,ttimeforblock, tdonestatus);
                list.add(t);
            }
            st.close();
            //rs.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
            
            Collections.sort(list);
            
            ImageIcon trueStatus = createImageIcon("images/doneStatus_True.png");
            ImageIcon warnStatus = createImageIcon("images/warning20x20.png");
            for(int i=0;i<list.size();i++){
                dm.setRowCount(list.size());
                //historyTable.setValueAt(list.get(i).taID, i, 0); 
                historyTable.setValueAt(list.get(i).taCreateDate, i, 0); 
                historyTable.setValueAt(list.get(i).taTitle, i, 1); 
                historyTable.setValueAt(list.get(i).taCategory, i, 2);
                historyTable.setValueAt(new File(list.get(i).taSound).getName().replaceFirst("[.][^.]+$", ""), i, 3); 
                historyTable.setValueAt(list.get(i).taTaskDate, i, 4);
                historyTable.setValueAt(list.get(i).taTime, i, 5);
                if(list.get(i).taDoneStatus == true){
                    historyTable.getColumnModel().getColumn(6).setCellRenderer(new ImageRenderer());
                    historyTable.setValueAt(trueStatus, i, 6);
                }else{
                    ///////CURRENT DATE
                    Date currentDate = new Date();
                    SimpleDateFormat forDate = new SimpleDateFormat("dd/MM/yy");
                    String curDate = forDate.format(currentDate);
                    Date cDate = new Date();
                    try {
                        cDate = forDate.parse(curDate);
                    } catch (ParseException ex) {
                        Logger.getLogger(CreateTasksPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    ///////CURRENT TIME
                    SimpleDateFormat forTime = new SimpleDateFormat("hh:mm aa");
                    String curTime = forTime.format(currentDate);
                    Date cTime = new Date();
                    try {
                        cTime = forTime.parse(curTime);
                    } catch (ParseException ex) {
                        Logger.getLogger(CreateTasksPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    Date dT = new Date();
                    Date tT = new Date();
                    try{
                    ///////TASK DATE
                        dT = forDate.parse(list.get(i).taTaskDate);
                    //////TASK TIME
                        tT = forTime.parse(list.get(i).taTime);
                    }catch(ParseException ex){
                        Logger.getLogger(CreateTasksPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    historyTable.getColumnModel().getColumn(6).setCellRenderer(new ImageRenderer());
                    if(dT.before(cDate)){
                        historyTable.setValueAt(warnStatus, i, 6);
                    }else if(dT.equals(cDate)){ 
                            if(tT.before(cTime)){
                                historyTable.setValueAt(warnStatus, i, 6);
                            }else{}
                    }else{}
                }
            }
                
        }
        if(!jCheckBox1.isSelected() && startDate.getDate()==null && untilDate.getDate()==null ){
            clearListMouseClicked(evt);
            String message1 = "<HTML><FONT FACE=\"Khmer OS Content\" SIZE=4>សូមបញ្ចូលទិន្នន័យ!</FONT></HTML>";
            Object[] options= new Object[]{"<html><font face=\"Khmer OS\" size=3>យល់ព្រម</font></html"};
            ImageIcon warningIcon = createImageIcon("images/warning.png");
        
            /*Method showOptionDialog(Component parentComponent, 
                                    Object message, 
                                    String title, 
                                    int optionType, 
                                    int messageType,
                                    Icon icon, 
                                    Object[] options, 
                                    Object selectedValue)*/
            JOptionPane.showOptionDialog(null, message1, "", 0, 0, warningIcon, options, options[0]);
        }
        
        if(!jCheckBox1.isSelected()  && startDate.getDate()!=null && untilDate.getDate()!=null){
                historyTable.setShowVerticalLines(true);
                historyTable.setShowHorizontalLines(true);
                try {                
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
                    String start = sdf.format(startDate.getDate());
                    String until = sdf.format(untilDate.getDate());    
                    Calendar c1 = Calendar.getInstance();
                    c1.setTime(untilDate.getDate());
                    c1.add(Calendar.DATE, -1);
                    String untilMinus = sdf.format(c1.getTime());
                    Calendar c2 = Calendar.getInstance();
                    c2.setTime(startDate.getDate());
                    c2.add(Calendar.DATE, -1);
                    String startMinus = sdf.format(c2.getTime());
                    st = MainForm.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    rs = st.executeQuery("Select * from tbTasks where createDate>= # "+startMinus+" # AND createDate<= # "+until+ " # "+" OR createDate<= # "+start+" # AND createDate>= # "+untilMinus+ " # ");
                    while(rs.next()){
                        int tid = Integer.parseInt(rs.getString("taskID"));
                        String tcreatedate = rs.getString("createDate");
                        String ttitle = rs.getString("title");
                        String tnote = rs.getString("notes");
                        String tcategory = rs.getString("category");
                        String tsound = rs.getString("sounds");
                        String ttaskdate = rs.getString("taskDate");                
                        String ttime = rs.getString("times");
                
                        DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
                        Date d = (Date)formatter.parse(tcreatedate);
                        SimpleDateFormat newFormat = new SimpleDateFormat("dd/MM/yy");
                        String cd = newFormat.format(d);
                
                        String tapptoopen = rs.getString("appToOpen");
                        String tapptoblock = rs.getString("appToBlock");
                        int ttimeforblock = Integer.parseInt(rs.getString("timeForBlock"));
                        boolean tdonestatus = rs.getBoolean("doneStatus");
                        TTask t1 = new TTask(tid, cd, ttitle, tnote, tcategory, tsound, ttaskdate, ttime,tapptoopen,tapptoblock,ttimeforblock, tdonestatus);
                        list1.add(t1);
                    }
                   st.close();
//                   rs.close();
                    } catch (Exception e) {
                        
                    }
                //Sort by createDate  
                Collections.sort(list1);
                    
                ImageIcon warnStatus = createImageIcon("images/warning20x20.png");
                ImageIcon trueStatus = createImageIcon("images/doneStatus_True.png");
                for(int i=0;i<list1.size();i++){
                    dm.setRowCount(list1.size());           
                  //historyTable.setValueAt(list1.get(i).taID, i, 0); 
                    historyTable.setValueAt(list1.get(i).taCreateDate, i, 0); 
                    historyTable.setValueAt(list1.get(i).taTitle, i, 1); 
                    historyTable.setValueAt(list1.get(i).taCategory, i, 2); 
                    historyTable.setValueAt(new File(list1.get(i).taSound).getName().replaceFirst("[.][^.]+$", ""), i, 3); 
                    historyTable.setValueAt(list1.get(i).taTaskDate, i, 4);
                    historyTable.setValueAt(list1.get(i).taTime, i, 5); 
                    if(list1.get(i).taDoneStatus == true){
                        historyTable.getColumnModel().getColumn(6).setCellRenderer(new ImageRenderer());
                        historyTable.setValueAt(trueStatus, i, 6);
                    }else{
                        
                        ///////CURRENT DATE
                        Date currentDate = new Date();
                        SimpleDateFormat forDate = new SimpleDateFormat("dd/MM/yy");
                        String curDate = forDate.format(currentDate);
                        Date cDate = new Date();
                        try {
                            cDate = forDate.parse(curDate);
                        } catch (ParseException ex) {
                            Logger.getLogger(CreateTasksPanel.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        ///////CURRENT TIME
                        SimpleDateFormat forTime = new SimpleDateFormat("hh:mm aa");
                        String curTime = forTime.format(currentDate);
                        Date cTime = new Date();
                        try {
                            cTime = forTime.parse(curTime);
                        } catch (ParseException ex) {
                            Logger.getLogger(CreateTasksPanel.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    
                        Date dT = new Date();
                        Date tT = new Date();
                        try{
                            ///////TASK DATE
                            dT = forDate.parse(list1.get(i).taTaskDate);
                            //////TASK TIME
                            tT = forTime.parse(list1.get(i).taTime);
                        }catch(ParseException ex){
                            Logger.getLogger(CreateTasksPanel.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    
                        historyTable.getColumnModel().getColumn(6).setCellRenderer(new ImageRenderer());
                        if(dT.before(cDate)){
                            historyTable.setValueAt(warnStatus, i, 6);
                        }else if(dT.equals(cDate)){ 
                            if(tT.before(cTime)){
                                historyTable.setValueAt(warnStatus, i, 6);
                            }else{}
                        }else{}
                
                        }
                    //historyTable.setValueAt(list1.get(i).taDoneStatus, i, 6);
            }
        }
    }//GEN-LAST:event_showLabelMouseClicked

    private void clearListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearListMouseClicked
        // TODO add your handling code here:
          jCheckBox1.setSelected(false);
          startDate.setDate(null);
          untilDate.setDate(null);
          //historyTable.setShowVerticalLines(true);          
          historyTable.setShowVerticalLines(false);
          historyTable.setShowHorizontalLines(false);
          
          DefaultTableModel dm = (DefaultTableModel)historyTable.getModel();
          dm.setRowCount(11);    

          ImageIcon empty = createImageIcon("images/empty.png");
          for(i=0; i<11;i++){
                historyTable.setValueAt("", i, 0);
                historyTable.setValueAt("", i, 1);
                historyTable.setValueAt("", i, 2);
                historyTable.setValueAt("", i, 3);
                historyTable.setValueAt("", i, 4);
                historyTable.setValueAt("", i, 5);
                historyTable.getColumnModel().getColumn(6).setCellRenderer(new ImageRenderer());
                historyTable.setValueAt(empty, i, 6);
             //historyTable.setValueAt("", i, 7);
            }
         
    }//GEN-LAST:event_clearListMouseClicked

    private void clearListMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearListMouseEntered
        // TODO add your handling code here:
        clearList.setBorder(BorderFactory.createLineBorder(Color.RED,2));
    }//GEN-LAST:event_clearListMouseEntered

    private void clearListMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearListMouseExited
        // TODO add your handling code here:
        clearList.setBorder(BorderFactory.createEmptyBorder());
    }//GEN-LAST:event_clearListMouseExited
    
        /** Returns an ImageIcon, or null if the path was invalid. */
    protected static ImageIcon createImageIcon(String path) {
        java.net.URL imgURL = HistoryPanel.class.getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL);
        } else {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel clearList;
    private javax.swing.JTable historyTable;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel showLabel;
    private org.jdesktop.swingx.JXDatePicker startDate;
    private org.jdesktop.swingx.JXDatePicker untilDate;
    // End of variables declaration//GEN-END:variables

}

 class TTask implements Comparable<TTask>{
    public int taID;
    public String taCreateDate, taTitle, taNote, taTaskDate, taCategory, taTime, taSound, taOpen, taBlock;
    public int taTimeBlock;
    public boolean taDoneStatus;
        
    public TTask(int id,String createD,String title,String noteTa,String cate,String soundTa,String taskD,String timeTa,
                String openTa,String blockTa,int timeBlock,boolean status){
            taID = id;          taCreateDate = createD;     taTitle = title;        taNote = noteTa;
            taCategory = cate;  taSound = soundTa;          taTaskDate = taskD;     taTime = timeTa;
            taOpen = openTa;    taBlock = blockTa;          taTimeBlock = timeBlock;taDoneStatus = status;
            
        }

    @Override
    public String toString() {
        return "";
    }

    @Override
    public int compareTo(TTask t) {
        
        /* For Ascending order*/
        return this.taCreateDate.compareTo(t.taCreateDate);

        /* For Descending order do like this */
        //return compareage-this.studentage;
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
 
}

class ImageRenderer extends DefaultTableCellRenderer {
      JLabel lbl = new JLabel();
      public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {        
        lbl.setIcon((ImageIcon)value);
        lbl.setHorizontalAlignment(0);
        lbl.setOpaque(true);
        lbl.setBackground(MainForm.selectedColor);
        return lbl;
      }
}






